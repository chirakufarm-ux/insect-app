import streamlit as st
from PIL import Image
import torch
import os

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏•‡∏á", page_icon="ü™≤")
st.title("ü™≤ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏•‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI")
st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡∏•‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£")

# ‡∏•‡∏ö cache ‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏ö‡∏ö Windows-safe
torch_hub_cache = os.path.expanduser(r"~\.cache\torch\hub")
if os.path.exists(torch_hub_cache):
    import shutil
    shutil.rmtree(torch_hub_cache)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOv5 ‡πÅ‡∏ö‡∏ö force reload
@st.cache_resource
def load_model():
    model = torch.hub.load(
        'ultralytics/yolov5',  # repo
        'custom',
        path=os.path.join(os.getcwd(), 'best.pt'),  # path ‡πÅ‡∏ö‡∏ö Windows-safe
        force_reload=True
    )
    return model

try:
    model = load_model()
except Exception as e:
    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ: {e}")
    st.stop()
# ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
uploaded_file = st.file_uploader("üì∏ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏°‡∏•‡∏á", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_column_width=True)

    st.write("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...")
    results = model(image)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    result_img = results.render()[0]
    st.image(result_img, caption="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö", use_column_width=True)

    labels = results.pandas().xyxy[0]['name'].tolist()
    st.write("**‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö:**", ", ".join(labels))

    # ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏°‡∏•‡∏á‡∏î‡∏µ / ‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä
    beneficial = {
        'orange ladybird': 'üü¢ ‡πÅ‡∏°‡∏•‡∏á‡πÄ‡∏ï‡πà‡∏≤‡∏ó‡∏≠‡∏á - ‡∏Å‡∏¥‡∏ô‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢ ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏°‡∏•‡∏á‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå‡πÑ‡∏ß‡πâ'
    }

    harmful = {
        'water beetle': 'üî¥ ‡∏î‡πâ‡∏ß‡∏á‡∏ô‡πâ‡∏≥ - ‡∏Å‡∏±‡∏î‡∏Å‡∏¥‡∏ô‡∏û‡∏∑‡∏ä‡∏ô‡πâ‡∏≥ ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å‡πÅ‡∏™‡∏á‡πÑ‡∏ü‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏≠‡∏Å',
        'rice borer': 'üî¥ ‡∏´‡∏ô‡∏≠‡∏ô‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß - ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡∏ô‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å‡πÅ‡∏™‡∏á‡πÑ‡∏ü‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°',
        'moth': 'üî¥ ‡∏ú‡∏µ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô - ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≠‡∏ô‡∏Å‡∏±‡∏î‡πÉ‡∏ö ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ö‡∏µ‡∏ó‡∏µ (Bt)',
        'goldfly': 'üî¥ ‡πÅ‡∏°‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏≠‡∏á - ‡πÄ‡∏à‡∏≤‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πâ ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å‡∏ü‡∏µ‡πÇ‡∏£‡πÇ‡∏°‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏™‡∏∏‡∏Å‡∏ó‡∏¥‡πâ‡∏á',
        'fruit fly': 'üî¥ ‡πÅ‡∏°‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ú‡∏•‡πÑ‡∏°‡πâ - ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÄ‡∏ô‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢ ‡∏´‡πà‡∏≠‡∏ú‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å‡∏•‡πà‡∏≠',
        'bph': 'üî¥ ‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• - ‡∏î‡∏π‡∏î‡∏ô‡πâ‡∏≥‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡πâ‡∏≤‡∏ß ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡∏ö‡∏¥‡∏ß‡πÄ‡∏ß‡∏≠‡πÄ‡∏£‡∏µ‡∏¢',
        'black beetle': 'üî¥ ‡∏î‡πâ‡∏ß‡∏á‡∏î‡∏≥ - ‡∏Å‡∏±‡∏î‡∏£‡∏≤‡∏Å‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡∏¢‡∏∑‡πà‡∏≠‡∏•‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏û‡∏£‡∏ß‡∏ô‡∏î‡∏¥‡∏ô'
    }

    found_good, found_bad, found_unknown = [], [], []

    for label in labels:
        if label in beneficial:
            found_good.append(label)
            st.success(beneficial[label])
        elif label in harmful:
            found_bad.append(label)
            st.error(harmful[label])
        else:
            found_unknown.append(label)
            st.info(f"‚ùì ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏ô‡∏¥‡∏î: {label}")

    st.markdown("---")
    st.subheader("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°")
    st.write(f"‚úÖ ‡πÅ‡∏°‡∏•‡∏á‡∏î‡∏µ: {', '.join(found_good) if found_good else '‡πÑ‡∏°‡πà‡∏°‡∏µ'}")
    st.write(f"‚ö†Ô∏è ‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä: {', '.join(found_bad) if found_bad else '‡πÑ‡∏°‡πà‡∏°‡∏µ'}")
    st.write(f"‚ùì ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏ô‡∏¥‡∏î: {', '.join(found_unknown) if found_unknown else '‡πÑ‡∏°‡πà‡∏°‡∏µ'}")

    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
    if len(found_bad) > len(found_good):
        st.warning("üí° ‡∏û‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏°‡∏•‡∏á‡∏î‡∏µ ‚Äî ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏ö‡∏ö‡∏ä‡∏µ‡∏ß‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å‡∏ü‡∏µ‡πÇ‡∏£‡πÇ‡∏°‡∏ô")
    elif len(found_good) > len(found_bad):
        st.success("üåø ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏®‡∏î‡∏µ ‡∏°‡∏µ‡πÅ‡∏°‡∏•‡∏á‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÑ‡∏ß‡πâ")
    else:
        st.info("‚öñÔ∏è ‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏°‡∏•‡∏á‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô")